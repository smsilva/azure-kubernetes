#!/bin/bash
export THIS_SCRIPT_DIRECTORY=$(dirname $0)
export PATH=${PATH}:${THIS_SCRIPT_DIRECTORY}

show_usage() {
  cat <<EOF

  ./aks-nodepool-upgrade \\
    --cluster-name aks-cluster-example \\
    --resource-group aks-cluster-example \\
    --nodepool user1 \\
    --nodepool user2 \\
    --hard-limit-min 3 \\
    --hard-limit-max 5

EOF
}

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
case $1 in
  -h | --help )
    show_usage
    exit
    ;;
  -cn | --cluster-name )
    shift; AKS_CLUSTER_NAME=$1
    ;;
  -rg | --resource-group )
    shift; AKS_CLUSTER_RESOURCE_GROUP_NAME=$1
    ;;
  --nodepool )
    shift; [ -z "${AKS_NODEPOOLS}" ] && AKS_NODEPOOLS="$1" || AKS_NODEPOOLS="${AKS_NODEPOOLS},$1"
    ;;
  -min | --hard-limit-min )
    shift; HARD_LIMIT_MIN=$1
    ;;
  -max | --hard-limit-max )
    shift; HARD_LIMIT_MAX=$1
    ;;
esac; shift; done

if [[ "$1" == '--' ]]; then shift; fi

if [ -z "${AKS_CLUSTER_NAME}"                ] || \
   [ -z "${AKS_CLUSTER_RESOURCE_GROUP_NAME}" ] || \
   [ -z "${AKS_NODEPOOLS}"                   ] || \
   [ -z "${HARD_LIMIT_MIN}"                  ] || \
   [ -z "${HARD_LIMIT_MAX}"                  ]; then
  echo "You must use ALL parameters."
  echo ""
  show_usage
  exit 1
fi

for NODEPOOL_NAME in ${AKS_NODEPOOLS//,/ }; do
  aks-nodepool-info \
    --cluster-name ${AKS_CLUSTER_NAME} \
    --resource-group ${AKS_CLUSTER_RESOURCE_GROUP_NAME} \
    --name ${NODEPOOL_NAME} > "${THIS_SCRIPT_DIRECTORY}/${NODEPOOL_NAME}.env"
done

AKS_LATEST_VERSION=""
AKS_NODEPOOL_SOURCE_NAME=""
AKS_NODEPOOL_SOURCE_VERSION=""
AKS_NODEPOOL_TARGET_NAME=""
AKS_NODEPOOL_TARGET_VERSION=""

for NODEPOOL_NAME in ${AKS_NODEPOOLS//,/ }; do
  unset AKS_NODEPOOL_PROVISIONING_STATE
  unset AKS_NODEPOOL_POWER_STATE_CODE

  source "${THIS_SCRIPT_DIRECTORY}/${NODEPOOL_NAME}.env"

  if [ "${AKS_NODEPOOL_PROVISIONING_STATE}" != "Succeeded" ]; then
    echo "[ERROR] Node Pool ${NODEPOOL_NAME} provisioning state must be \"Succeeded\" instead of \"${AKS_NODEPOOL_PROVISIONING_STATE}\"."
    exit 1
  fi

  if [ "${AKS_NODEPOOL_POWER_STATE_CODE}" != "Running" ]; then
    echo "[ERROR] Node Pool ${NODEPOOL_NAME} Power State must be \"Running\" instead of \"${AKS_NODEPOOL_POWER_STATE_CODE}\"."
    exit 1
  fi

  if [ -z "${AKS_LATEST_VERSION}" ]; then
    AKS_LATEST_VERSION=${AKS_NODEPOOL_ORCHESTRATOR_VERSION}
  fi

  AKS_LATEST_VERSION=$(echo -e "${AKS_LATEST_VERSION}\n${AKS_NODEPOOL_ORCHESTRATOR_VERSION}" \
  | sort --version-sort \
  | tail -1)
done

for NODEPOOL_NAME in ${AKS_NODEPOOLS//,/ }; do
  source "${THIS_SCRIPT_DIRECTORY}/${NODEPOOL_NAME}.env"

  if [ "${AKS_LATEST_VERSION}" == "${AKS_NODEPOOL_ORCHESTRATOR_VERSION}" ]; then
    AKS_NODEPOOL_TARGET_NAME="${NODEPOOL_NAME}"
    AKS_NODEPOOL_TARGET_VERSION="${AKS_NODEPOOL_ORCHESTRATOR_VERSION}"
  else
    AKS_NODEPOOL_SOURCE_NAME="${NODEPOOL_NAME}"
    AKS_NODEPOOL_SOURCE_VERSION="${AKS_NODEPOOL_ORCHESTRATOR_VERSION}"
  fi
done

if [ "${AKS_NODEPOOL_SOURCE_VERSION}" != "${AKS_NODEPOOL_TARGET_VERSION}" ]; then
  ./aks-nodepool-decrease \
    --cluster-name ${AKS_CLUSTER_NAME} \
    --resource-group ${AKS_CLUSTER_RESOURCE_GROUP_NAME} \
    --name ${AKS_NODEPOOL_SOURCE_NAME}

  ./aks-nodepool-increase \
    --cluster-name ${AKS_CLUSTER_NAME} \
    --resource-group ${AKS_CLUSTER_RESOURCE_GROUP_NAME} \
    --source ${AKS_NODEPOOL_SOURCE_NAME} \
    --target ${AKS_NODEPOOL_TARGET_NAME} \
    --hard-limit-min ${HARD_LIMIT_MIN} \
    --hard-limit-max ${HARD_LIMIT_MAX}
else
  echo "Nothing to do."
fi
