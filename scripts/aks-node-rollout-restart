#!/bin/bash
show_usage() {
  cat <<EOF

  ./aks-node-rollout-restart \\
    --cluster-name aks-cluster-example \\
    --resource-group aks-cluster-example \\
    --name aks-systempool-37832835-vmss000000 \\
    --dry-run

  ./aks-node-rollout-restart \\
    --cluster-name aks-cluster-example \\
    --resource-group aks-cluster-example \\
    --nodes 1 \\
    --dry-run

EOF
}

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
case $1 in
  -h | --help )
    show_usage
    exit
    ;;
  -cn | --cluster-name )
    shift; AKS_CLUSTER_NAME=$1
    ;;
  -rg | --resource-group )
    shift; AKS_CLUSTER_RESOURCE_GROUP_NAME=$1
    ;;
  -n | --name )
    shift; AKS_NODE_NAME=$1
    ;;
  -nc | --nodes )
    shift; AKS_NODE_COUNT=$1
    ;;
  --dry-run )
    shift; DRY_RUN="y"
    ;;
esac; shift; done

if [[ "$1" == '--' ]]; then shift; fi

DRY_RUN=${DRY_RUN-n}

if [ -z "${AKS_CLUSTER_NAME}"                ] || \
   [ -z "${AKS_CLUSTER_RESOURCE_GROUP_NAME}" ] || \
   [ -z "${AKS_NODE_NAME}${AKS_NODE_COUNT}"  ]; then
  show_usage
  exit 1
fi

if ! which kubectl &> /dev/null; then
  az aks install-cli
fi

KUBECTL_CONFIG_CONTEXT_EXISTS=$(kubectl config get-contexts | grep ${AKS_CLUSTER_NAME} | wc -l)

if [ "${KUBECTL_CONFIG_CONTEXT_EXISTS}" == "0" ]; then
  az aks get-credentials \
    --name ${AKS_CLUSTER_NAME?} \
    --resource-group ${AKS_CLUSTER_RESOURCE_GROUP_NAME?} \
    --overwrite-existing \
    --admin
fi

function rollout_restart() {
  RESOURCE_TYPE=$1
  NODE_NAME=$2

  kubectl get ${RESOURCE_TYPE?} \
    -A \
    --no-headers \
    --output wide \
  | while read LINE; do
    RESOURCE_NAMESPACE=$(awk '{ print $1 }' <<< "${LINE}")
    RESOURCE_NAME=$(     awk '{ print $2 }' <<< "${LINE}")
    RESOURCE_SELECTORS=$(awk '{ print $9 }' <<< "${LINE}")

    OBJECT_POD_LIST=$(kubectl get pod \
      --output wide \
      --no-headers \
      --namespace ${RESOURCE_NAMESPACE} \
      --selector "${RESOURCE_SELECTORS}" \
      | grep ${NODE_NAME} \
      | awk '{print $1}' \
      | sed 's| |\n|g')

    if [ "${OBJECT_POD_LIST}" != "" ]; then
      echo "${NODE_NAME} :: ${RESOURCE_TYPE} :: ${RESOURCE_NAMESPACE} :: ${RESOURCE_NAME}"
      echo ""
      echo ${OBJECT_POD_LIST} | xargs -I {} echo "  {}" 

      if [ "${DRY_RUN}" != "y" ]; then
        kubectl \
          --namespace ${RESOURCE_NAMESPACE} \
          rollout restart ${RESOURCE_TYPE} ${RESOURCE_NAME}
      fi
      echo ""
    fi
  done
}

node_cordon() {
  NODE_NAME=$1

  if [ "${DRY_RUN}" != "y" ]; then
    kubectl cordon ${NODE_NAME}
  fi
}

if [ -n "${AKS_NODE_NAME}" ]; then
  kubectl get nodes \
    --output jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' \
  | grep ${AKS_NODE_NAME} \
  | while read NODE_NAME; do
    node_cordon ${NODE_NAME?}
    rollout_restart deploy ${NODE_NAME?}
  done
else
  kubectl get nodes \
    --output jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' \
  | head -${AKS_NODE_COUNT} \
  | while read NODE_NAME; do
    rollout_restart deploy ${NODE_NAME?}
  done
fi
