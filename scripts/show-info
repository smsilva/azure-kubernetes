#!/bin/bash
export THIS_SCRIPT_DIRECTORY=$(dirname $0)
export PATH=${PATH}:${THIS_SCRIPT_DIRECTORY}

show_usage() {
  cat <<EOF

  ./show-info \\
    --cluster-name   aks-cluster-example \\
    --resource-group aks-cluster-example

EOF
}

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
case $1 in
  -h | --help )
    show_usage
    exit
    ;;
  -cn | --cluster-name )
    shift; AKS_CLUSTER_NAME=$1
    ;;
  -rg | --resource-group )
    shift; AKS_CLUSTER_RESOURCE_GROUP_NAME=$1
    ;;
esac; shift; done

if [[ "$1" == '--' ]]; then shift; fi

if [ -z "${AKS_CLUSTER_NAME}"                ] || \
   [ -z "${AKS_CLUSTER_RESOURCE_GROUP_NAME}" ]; then
  show_usage
  exit 1
fi

aks-nodepool-show \
  --cluster-name "${AKS_CLUSTER_NAME}" \
  --resource-group "${AKS_CLUSTER_RESOURCE_GROUP_NAME}"

KUBECTL_CONFIG_CONTEXT_EXISTS=$(kubectl config get-contexts | grep ${AKS_CLUSTER_NAME} | wc -l)

if [ "${KUBECTL_CONFIG_CONTEXT_EXISTS}" -lt 1 ]; then
  exit 0
fi

echo ""

(
echo "RolloutRestartedNode                CandidateToDelete  ScheduledToDelete "
echo "----------------------------------- ------------------ ------------------"

kubectl get nodes \
  --selector rollout-restarted \
  --output jsonpath='{range .items[*]}{.metadata.name} {.spec.taints[?(@.key == "DeletionCandidateOfClusterAutoscaler")].key} {.spec.taints[?(@.key == "ToBeDeletedByClusterAutoscaler")].key}{"\n"}{end}' \
| sed 's/DeletionCandidateOfClusterAutoscaler/Yes/g' \
| sed 's/ToBeDeletedByClusterAutoscaler/Yes/g'
) \
| column -t
