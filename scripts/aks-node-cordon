#!/bin/bash
export THIS_SCRIPT_NAME=$0

show_usage() {
  cat <<EOF

  ${THIS_SCRIPT_NAME} \\
    --cluster-name aks-cluster-example \\
    --resource-group aks-cluster-example \\
    --name aks-userpool1-39323922-vmss000001 \\
    --dry-run

  ${THIS_SCRIPT_NAME} \\
    --cluster-name aks-cluster-example \\
    --resource-group aks-cluster-example \\
    --name aks-userpool1-39323922-vmss000001

  ${THIS_SCRIPT_NAME} \\
    --cluster-name aks-cluster-example \\
    --resource-group aks-cluster-example \\
    --name userpool1-39323922

  ${THIS_SCRIPT_NAME} \\
    --cluster-name aks-cluster-example \\
    --resource-group aks-cluster-example \\
    --name userpool1-39323922 \\
    --count 1 \\
    --debug 1

EOF
}

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
case $1 in
  -h | --help )
    show_usage
    exit
    ;;

  -cn | --cluster-name )
    shift; AKS_CLUSTER_NAME=$1
    ;;

  -rg | --resource-group )
    shift; AKS_CLUSTER_RESOURCE_GROUP_NAME=$1
    ;;

  -n | --name )
    shift; NODE_NAME_REGEX=$1
    ;;

  -c | --count )
    shift; NODE_COUNT_DESIRED=$1
    ;;

  -d | --debug )
    shift; DEBUG_LEVEL=$1
    ;;

  --dry-run )
    DRY_RUN="y"
    ;;
esac; shift; done

if [[ "$1" == '--' ]]; then shift; fi

DRY_RUN=${DRY_RUN-n}
DEBUG_LEVEL=${DEBUG_LEVEL-1}
NODE_COUNT_DESIRED=${NODE_COUNT_DESIRED-1}

if [ -z "${NODE_NAME_REGEX}${NODE_COUNT_DESIRED}"  ]; then
  show_usage
  exit 1
fi

if [ -z "${AKS_CLUSTER_NAME}"                ] || \
   [ -z "${AKS_CLUSTER_RESOURCE_GROUP_NAME}" ] || \
   [ -z "${NODE_NAME_REGEX}"                 ]; then
  echo "You must inform Node Pool / Node Name regex."
  show_usage
  exit 1
fi

if ! which kubectl &> /dev/null; then
  az aks install-cli
fi

KUBECTL_CONFIG_CONTEXT_EXISTS=$(
  kubectl config get-contexts \
| grep ${AKS_CLUSTER_NAME} \
| wc -l)

if [ "${KUBECTL_CONFIG_CONTEXT_EXISTS}" == "0" ]; then
  az aks get-credentials \
    --name ${AKS_CLUSTER_NAME?} \
    --resource-group ${AKS_CLUSTER_RESOURCE_GROUP_NAME?} \
    --overwrite-existing \
    --admin &> /dev/null
fi

NODE_COUNT_UNSCHEDULABLE=$(
  kubectl get nodes \
  --output custom-columns=NodeName:.metadata.name,TaintKey:.spec.taints[*].key,TaintValue:.spec.taints[*].value,TaintEffect:.spec.taints[*].effect \
| grep ${NODE_NAME_REGEX?} \
| grep "node\.kubernetes\.io\/unschedulable.*NoSchedule" \
| wc -l
)

list_nodes_to_cordon() {
  NODE_COUNT=${1?}

  kubectl get nodes \
    --output custom-columns=NodeName:.metadata.name,TaintKey:.spec.taints[*].key,TaintValue:.spec.taints[*].value,TaintEffect:.spec.taints[*].effect \
  | grep "${NODE_NAME_REGEX?}" \
  | grep -v "node\.kubernetes\.io\/unschedulable.*NoSchedule" \
  | head -${NODE_COUNT} \
  | awk '{ print $1 }'
}

NODE_COUNT_TO_CORDON=$(( (${NODE_COUNT_DESIRED} - ${NODE_COUNT_UNSCHEDULABLE}) / 2))

if [ "${NODE_COUNT_TO_CORDON}" -lt 0 ]; then
  NODE_COUNT_TO_CORDON=0
fi

if [ "${DEBUG_LEVEL}" -gt "1" ]; then
  echo ""
  echo "Node Filter:"
  echo "  regex.........: ${NODE_NAME_REGEX}"
  echo "  desired.......: ${NODE_COUNT_DESIRED}"
  echo "  effective.....: ${NODE_COUNT_TO_CORDON}"
  echo "  unschedulable.: ${NODE_COUNT_UNSCHEDULABLE}"
  echo ""
fi

if [ "${NODE_COUNT_TO_CORDON}" -gt 0 ]; then
  if [ "${DRY_RUN}" == "y" ]; then
    list_nodes_to_cordon ${NODE_COUNT_TO_CORDON}
  else
    list_nodes_to_cordon ${NODE_COUNT_TO_CORDON} \
    | xargs -I {} kubectl cordon {}
  fi
fi
